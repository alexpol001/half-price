<?php

namespace App\Models\Users;

use App\Helpers\CommonHelper;
use App\Mail\NewShopEmail;
use App\Models\Client\Net;
use App\Models\UwtModel;
use App\User;
use Illuminate\Support\Facades\Hash;

/**
 * App\Models\Users\Shop
 *
 * @property int $id
 * @property int net_id
 * @property int $user_info_id
 * @property string $city
 * @property string $street
 * @property string $house
 * @property string $phone
 * @property ShopProduct $products
 * @property double $lat
 * @property double $lon
 * @property Net $net
 * @property UserInfo $userInfo
 */
class Shop extends UwtModel
{
    public function net()
    {
        return $this->belongsTo('App\Models\Client\Net');
    }

    public function userInfo()
    {
        return $this->belongsTo('App\Models\Users\UserInfo');
    }

    public function products()
    {
        return $this->hasMany('App\Models\Users\ShopProduct', 'shop_id', 'id');
    }

    public function categories() {
        return $this->hasMany('App\Models\Products\ProductCategory');
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'net_id', 'city', 'street', 'house', 'phone', 'lat', 'lon'
    ];


    public function getLabels()
    {
        return [
            'net_id' => 'Сеть',
            'email' => 'Email',
            'city' => 'Город',
            'street' => 'Улица',
            'house' => 'Дом',
            'phone' => 'Телефон',
            'password' => 'Пароль',
            'repassword' => 'Повторите пароль',
            'agreement' => 'Согласие на обработку <a target="_blank" href="/politics">персональных данных</a>'
        ];
    }

    public function rules()
    {
        return [
            'net_id' => 'required|exists:nets,id',
            'email' => 'required|email|string|max:255|unique:users,email',
            'city' => 'string|max:255|required',
            'street' => 'string|max:255|required',
            'house' => 'string|max:255|required',
            'phone' => 'regex:/^\+7\s\([0-9]{3}\)\s[0-9]{3}-[0-9]{2}-[0-9]{2}$/|required',
            'password' => 'string|min:8|required',
            'repassword' => 'same:password|required',
            'agreement' => 'required'
        ];
    }

    public function beforeSave($insert, $attributes)
    {
        $attributes['password'] = Hash::make($attributes['password']);
        /** @var Net $net */
        $net = Net::find($attributes['net_id']);
        $attributes['name'] = $net->title;
        $user = User::create($attributes);
        $this->user_info_id = User::find($user->id)->userInfo->id;
        return parent::beforeSave($insert, $attributes); // TODO: Change the autogenerated stub
    }

    public function isVisible() {
        return ($this->userInfo->userRole->id == 3);
    }

    public function getAccess()
    {
        return [
            'index' => [1, 2],
            'create' => [1, 2],
            'update' => [1, 2],
        ];
    }

    public function afterSave($insert, $attributes)
    {
        $receivers = UserInfo::query()->whereHas('userRole', function ($query) {
            $query->whereId(2);
        })->get();
        /** @var UserInfo $receiver */
        foreach ($receivers as $receiver) {
            $receiver->user->notify(new NewShopEmail($this->userInfo->id));
        }
        return parent::afterSave($insert, $attributes); // TODO: Change the autogenerated stub
    }
}
